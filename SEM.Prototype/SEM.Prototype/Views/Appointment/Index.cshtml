@model CalendarViewModel
@using System.Security.Claims

@{
    ViewData["Title"] = "Schedule Appointment";
}


<!-- FullCalendar CSS -->
<link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.0/main.min.css" rel="stylesheet" />

<!-- FullCalendar JS -->
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.0/main.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.0/interaction.min.js"></script>

<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">

<!-- Bootstrap JS (including Popper.js) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

<!-- jQuery (necessary for drag-and-drop) -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<h2>Schedule an Appointment</h2>

<div class="row">
    <!-- Staff List on the Left -->
    <div class="col-md-2">
        <h4>Available Staff</h4>
        <div id="staff-list">
            @foreach (var staff in Model.AvailableStaffs)
            {
                <div class="staff-row">
                    <h5 data-staff-id="@staff.StaffId" data-staff-name="@staff.Staff.StaffName" class="fc-event">
                        @staff.Staff.StaffName
                    </h5>
                    <ul>
                        @foreach (var slot in staff.AvailableSlots)
                        {
                            <li>
                                @slot.DayOfWeek: @slot.StartTime.ToString("hh\\:mm") - @slot.EndTime.ToString("hh\\:mm")
                            </li>
                        }
                    </ul>
                </div>
            }
        </div>
    </div>

    <!-- FullCalendar for booking on the right -->
    <div class="col-md-10">
        <div id="calendar"></div>
    </div>
</div>


<!-- Bootstrap Modal for Event Details -->
<div class="modal fade" id="eventDetailsModal" tabindex="-1" aria-labelledby="eventDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="eventDetailsModalLabel">Event Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="eventDetailsContent"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" id="deleteEventBtn" class="btn btn-danger">Delete Event</button>
            </div>
        </div>
    </div>
</div>
<!-- Bootstrap Modal for Time Input -->
<div class="modal fade" id="timeInputModal" tabindex="-1" aria-labelledby="timeInputModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="timeInputModalLabel">Enter Appointment Time</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <label for="appointmentTime">Time (HH:mm):</label>
                <input type="time" id="appointmentTime" class="form-control" value="09:00">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="confirmTimeBtn" class="btn btn-primary">Confirm</button>
            </div>
        </div>
    </div>
</div>


<!-- FullCalendar and Drag-and-Drop Logic -->
<script>
    var userId = '@User.FindFirstValue(ClaimTypes.NameIdentifier)';
    console.log("Logged-in User ID:", userId);
    // Use the bookedAppointments data to pass into the FullCalendar's events.
    var bookedAppointments = @Html.Raw(Json.Serialize(Model.BookedAppointments));  // Pass booked appointments to JavaScript
    console.log("Booked Appointments:", bookedAppointments);  // Log the appointments

    document.addEventListener('DOMContentLoaded', function () {
        var staffListEl = document.getElementById('staff-list');
        var calendarEl = document.getElementById('calendar');
        var selectedDate;  // To store the selected date when an event is dropped
        var selectedStaffId;
        var selectedStaffName;

        // Make the staff list draggable
        new FullCalendar.Draggable(staffListEl, {
            itemSelector: '.fc-event',
            eventData: function (eventEl) {
                return {
                    title: eventEl.getAttribute('data-staff-name'),
                    staffId: eventEl.getAttribute('data-staff-id')
                };
            }
        });

        // Initialize FullCalendar with previously booked appointments
        var calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            editable: true,
            droppable: true,
            events: bookedAppointments.map(appointment => ({
                title: appointment.staff.staffName,
                start: appointment.appointmentDateTime,
                extendedProps: {
                    appointmentId: appointment.id,
                    gMeetLink: appointment.gMeetLink
                }
            })),
            // Custom time format for events
            eventTimeFormat: {
                hour: 'numeric',
                minute: '2-digit',
                meridiem: 'short' // Will display in AM/PM format
            },
            // Handle external drop for creating new appointments
            drop: function (info) {
                info.jsEvent.preventDefault();  // Prevent FullCalendar from adding the event automatically

                selectedStaffId = info.draggedEl.getAttribute('data-staff-id');
                selectedStaffName = info.draggedEl.getAttribute('data-staff-name');
                selectedDate = info.dateStr;

                var today = new Date().setHours(0, 0, 0, 0);
                var selectedDateTime = new Date(selectedDate).setHours(0, 0, 0, 0);

                // Check if the selected date is in the past
                if (selectedDateTime < today) {
                    alert("Cannot book an appointment in the past.");
                    return;
                }
                // Check if the user already has an appointment on the selected date
                var existingAppointment = bookedAppointments.find(function (appointment) {
                    var appointmentDate = new Date(appointment.appointmentDateTime).setHours(0, 0, 0, 0);
                    return appointmentDate === selectedDateTime;
                });

                if (existingAppointment) {
                    alert("You already have an appointment on this day.");
                    return;
                }
                // Show the time input modal
                $('#timeInputModal').modal('show');
            },

            // Event click handler for viewing event details and deleting events
            eventClick: function (info) {
                var gMeetLink = info.event.extendedProps.gMeetLink;

                // Modify the modal content to include the Google Meet link
                $('#eventDetailsContent').html(
                    "Event: " + info.event.title + " on " + info.event.start.toLocaleString() +
                    "<br>Google Meet Link: <a href='" + gMeetLink + "' target='_blank'>" + gMeetLink + "</a>"
                );

                $('#eventDetailsModal').modal('show');

                // Handle event deletion
                $('#deleteEventBtn').off('click').on('click', function () {
                    var appointmentId = info.event.extendedProps.appointmentId;

                    // Make an AJAX call to delete the appointment
                    $.ajax({
                        url: '/Appointment/DeleteAppointment',
                        type: 'POST',
                        data: {
                            appointmentId: appointmentId
                        },
                        success: function (response) {
                            if (response.success) {
                                info.event.remove();
                                $('#eventDetailsModal').modal('hide');
                                alert("Event deleted.");
                                window.location.reload();
                            } else {
                                alert("Failed to delete event: " + response.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error("Error deleting appointment:", error);
                        }
                    });
                });
            },

            // Remove automatically created event if present (just in case)
            eventReceive: function (eventInfo) {
                eventInfo.event.remove();  // This will remove any automatically added event
            }
        });

        // Handle the "Confirm" button click inside the modal
        $('#confirmTimeBtn').on('click', function () {
            var selectedTime = $('#appointmentTime').val();  // Get the selected time

            if (selectedTime) {
                var appointmentDateTime = selectedDate + 'T' + selectedTime;

                // Check staff availability via AJAX
                $.ajax({
                    url: '/Appointment/CheckAvailability',
                    type: 'POST',
                    data: {
                        staffId: selectedStaffId,
                        appointmentDateTime: appointmentDateTime
                    },
                    success: function (response) {
                        if (response.isAvailable) {
                            // If available, save the booked appointment
                            $.ajax({
                                url: '/Appointment/BookAppointment',
                                type: 'POST',
                                data: {
                                    userId: '@User.FindFirstValue(ClaimTypes.NameIdentifier)',
                                    staffId: selectedStaffId,
                                    appointmentDateTime: appointmentDateTime,
                                    gMeetLink: "https://gmeet-link-example.com"
                                },
                                success: function () {
                                    // Add the event to the calendar manually
                                    calendar.addEvent({
                                        title: selectedStaffName,
                                        start: appointmentDateTime,
                                        editable: false  // Make the event non-editable after booking
                                    });

                                    alert("Appointment booked with " + selectedStaffName);
                                    $('#timeInputModal').modal('hide');  // Close the modal after booking
                                    window.location.reload();
                                }
                            });
                        } else {
                            alert("Staff is not available at the selected time.");
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error checking availability:", error);
                    }
                });
            }
        });

        calendar.render();
    });

</script>


<style>
    #calendar {
        width:100%;
        margin: 0 auto;
        height: 600px; /* Ensure there is enough height for the calendar to render */
    }

    .staff-row {
        margin-bottom: 20px;
    }

    .fc-event {
        cursor: pointer;
        background-color: #007bff;
        color: white;
        padding: 5px;
        border-radius: 5px;
    }

    ul {
        list-style-type: none;
        padding-left: 0;
    }

    li {
        padding-left: 10px;
    }
</style>
