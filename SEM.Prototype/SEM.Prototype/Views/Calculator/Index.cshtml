@model SEM.Prototype.Models.CalculatorViewModel

@{
    ViewBag.Title = "Course Checker";
}
<button type="button" class="btn btn-primary" style="margin-bottom:20px;" onclick="toggleCalculator()">Fee Calculator</button>

<div id="calculatorForm" style="display: none;">
    <h2>Fee Calculator</h2>
    <form asp-action="Calculate" method="post" id="feeCalculatorForm">
        <div class="form-group">
            <label for="Programme">Programme</label>
            <select id="Programme" name="Programme" class="form-control" onchange="updateFields()">
                <option value="">Select Programme</option>
                <option value="Foundation">Foundation</option>
                <option value="Diploma">Diploma</option>
                <option value="Degree">Degree</option>
            </select>
        </div>

        <div class="form-group">
            <label for="Course">Courses</label>
            <select id="Course" name="Course" class="form-control">
                <option value="">Select Course</option>
            </select>
        </div>

        <div class="form-group">
            <label for="EntryCriteria">Entry Criteria</label>
            <select id="EntryCriteria" name="EntryCriteria" class="form-control">
                <option value="">Select Entry Criteria</option>
            </select>
        </div>

        <div class="form-group" id="ResultField">
            <label for="Result">Result</label>
            <select id="Result" name="Result" class="form-control">
                <option value="">Select Result</option>
            </select>
        </div>

        <div class="form-group" id="CgpaField" style="display: none;">
            <label for="Cgpa">CGPA</label>
            <input type="number" id="Cgpa" name="Cgpa" class="form-control" step="0.01" placeholder="Enter CGPA" />
        </div>

        <button type="submit" class="btn btn-primary" style="margin-top:30px;">Calculate Fee</button>
    </form>
    <div id="feeBreakdown" style="margin-top:20px;"></div>
    <button id="exportFeePDF" class="btn btn-secondary" style="display: none;">Export Fee </button>
    
</div>

<div id="courseComparison" style="margin-top:30px;">
    <h2>Course Comparison</h2>
    <div id="filterOptions" style="margin-top: 20px;">
        <h5>Filter Attributes</h5>
        <button class="toggle-btn" id="toggleOverview" onclick="toggleFilter('Overview')">Overview</button>
        <button class="toggle-btn" id="toggleCampuses" onclick="toggleFilter('Campuses')">Campuses</button>
        <button class="toggle-btn" id="toggleIntake" onclick="toggleFilter('Intake')">Intake</button>
        <button class="toggle-btn" id="toggleMinimumEntryRequirements" onclick="toggleFilter('MinimumEntryRequirements')">Minimum Entry Requirements</button>
        <button class="toggle-btn" id="toggleAcademicProgression" onclick="toggleFilter('AcademicProgression')">Academic Progression</button>
        <button class="toggle-btn" id="toggleCareerProspects" onclick="toggleFilter('CareerProspects')">Career Prospects</button>
        <button class="toggle-btn" id="toggleFees" onclick="toggleFilter('Fees')">Fees</button>
    </div>

    <form id="comparisonForm">
        <div class="form-group">
            <label>Select Courses to Compare:</label><br />
            <div id="courseCheckboxes">
                <input type="checkbox" id="diplomaCS" name="courses" value="Diploma in Computer Science" onchange="updateComparisonDetails()" />
                <label for="diplomaCS">Diploma in Computer Science</label><br />

                <input type="checkbox" id="diplomaIT" name="courses" value="Diploma in Information Technology" onchange="updateComparisonDetails()" />
                <label for="diplomaIT">Diploma in Information Technology</label><br />

                <input type="checkbox" id="diplomaSF" name="courses" value="Diploma in Software Engineering" onchange="updateComparisonDetails()" />
                <label for="diplomaSE">Diploma in Software Engineering</label><br />

                <input type="checkbox" id="degreeMM" name="courses" value="Bachelor of Science (Honours) in Management Mathematics with Computing" onchange="updateComparisonDetails()" />
                <label for="degreeMM">Bachelor of Science (Honours) in Management Mathematics with Computingg</label><br />

                <input type="checkbox" id="degreeEI" name="courses" value="Bachelor of Information Systems (Honours) in Enterprise Information Systems" onchange="updateComparisonDetails()" />
                <label for="degreeEI">Bachelor of Information Systems (Honours) in Enterprise Information Systems</label><br />

                <input type="checkbox" id="degreeIS" name="courses" value="Bachelor of Computer Science (Honours) in Interactive Software Technology" onchange="updateComparisonDetails()" />
                <label for="degreeIS">Bachelor of Computer Science (Honours) in Interactive Software Technology</label><br />

                <input type="checkbox" id="degreeIS2" name="courses" value="Bachelor of Information Technology (Honours) in Information Security" onchange="updateComparisonDetails()" />
                <label for="degreeIS2">Bachelor of Information Technology (Honours) in Information Security</label><br />

                <input type="checkbox" id="degreeDS" name="courses" value="Bachelor of Computer Science (Honours) in Data Science" onchange="updateComparisonDetails()" />
                <label for="degreeDS">Bachelor of Computer Science (Honours) in Data Science</label><br />

                <input type="checkbox" id="degreeSS" name="courses" value="Bachelor of Information Technology (Honours) in Software Systems Development" onchange="updateComparisonDetails()" />
                <label for="degreeSS">Bachelor of Information Technology (Honours) in Software Systems Development</label><br />

                <input type="checkbox" id="degreeSW" name="courses" value="Bachelor of Software Engineering (Honours)" onchange="updateComparisonDetails()" />
                <label for="degreeSW">Bachelor of Software Engineering (Honours)</label><br />

                <input type="checkbox" id="foundation" name="courses" value="Foundation in Computing" onchange="updateComparisonDetails()" />
                <label for="foundation">Foundation in Computing</label><br />
            </div>
        </div>
        <button type="button" class="btn btn-primary" style="margin-top:20px; margin-bottom:20px;" onclick="compareCourses()">Compare</button>
    </form>
    <div id="comparisonResult"></div>
</div>


<button id="exportPDF" style="margin-top:30px;">Export as PDF</button>



@section Scripts {
    <script>
        function toggleCalculator() {
            var form = document.getElementById("calculatorForm");
            form.style.display = (form.style.display === "none" || form.style.display === "") ? "block" : "none";
        }

        function updateFields() {
            var programme = document.getElementById("Programme").value;
            var coursesSelect = document.getElementById("Course");
            var entryCriteriaSelect = document.getElementById("EntryCriteria");
            var resultSelect = document.getElementById("Result");
            var resultField = document.getElementById("ResultField");
            var cgpaField = document.getElementById("CgpaField");

            // Clear previous options
            coursesSelect.innerHTML = '<option value="">Select Course</option>';
            entryCriteriaSelect.innerHTML = '<option value="">Select Entry Criteria</option>';
            resultSelect.innerHTML = '<option value="">Select Result</option>';

            // Define options for each programme
            var foundationCourses = [
                "Foundation in Computing"
            ];

            var diplomaCourses = [
                "Diploma in Computer Science",
                "Diploma in Software Engineering",
                "Diploma in Information Technology"
            ];

            var degreeCourses = [
                "Bachelor of Science (Honours) in Management Mathematics with Computing",
                "Bachelor of Information Systems (Honours) in Enterprise Information Systems",
                "Bachelor of Computer Science (Honours) in Interactive Software Technology",
                "Bachelor of Information Technology (Honours) in Information Security",
                "Bachelor of Computer Science (Honours) in Data Science",
                "Bachelor of Information Technology (Honours) in Software Systems Development",
                "Bachelor of Software Engineering (Honours)"
            ];

            var foundationCriteria = [
                "SPM",
                "O Level"
            ];

            var diplomaCriteria = [
                "SPM/O Level"
            ];

            var degreeCriteria = [
                "STPM / A Level",
                "UEC",
                "TARUMT Diploma / TARUMT Foundation / Matriculation"
            ];

            var resultsOptions = {
                "Diploma": {
                    "SPM/O Level": [
                        "SPM - 7As",
                        "8As",
                        "8A+ / A and above",
                        "O Level - 6As",
                        "7As",
                        "8As and above"
                    ]
                },
                "Foundation": {
                    "SPM": [
                        "5As",
                        "6As",
                        "7As",
                        "8As",
                        "8A+ / A and above"
                    ],
                    "O Level": [
                        "6As",
                        "7As",
                        "8As and above"
                    ]
                },
                "Degree": {
                    "STPM / A Level": [
                        "1A",
                        "2As",
                        "3As and above"
                    ],
                    "UEC": [
                        "5As",
                        "6As",
                        "7As",
                        "8As and above"
                    ]
                }
            };

            // Add options based on the selected programme
            var courses;
            var criteria;
            var results = [];
            switch (programme) {
                case "Diploma":
                    courses = diplomaCourses;
                    criteria = diplomaCriteria;
                    results = resultsOptions["Diploma"];
                    resultField.style.display = "block";
                    cgpaField.style.display = "none";
                    updateResults();
                    break;
                case "Degree":
                    courses = degreeCourses;
                    criteria = degreeCriteria;
                    resultField.style.display = "block";
                    cgpaField.style.display = "none";
                    updateResults();
                    break;
                case "Foundation":
                    courses = foundationCourses;
                    criteria = foundationCriteria;
                    results = resultsOptions["Foundation"];
                    resultField.style.display = "block";
                    cgpaField.style.display = "none";
                    break;
                default:
                    courses = [];
                    criteria = [];
                    results = [];
                    resultField.style.display = "none";
                    cgpaField.style.display = "none";
            }

            // Populate courses
            courses.forEach(function (option) {
                var opt = document.createElement("option");
                opt.value = option;
                opt.text = option;
                coursesSelect.add(opt);
            });

            // Populate entry criteria
            criteria.forEach(function (option) {
                var opt = document.createElement("option");
                opt.value = option;
                opt.text = option;
                entryCriteriaSelect.add(opt);
            });
        }

        function updateResults() {
            var entryCriteria = document.getElementById("EntryCriteria").value;
            var programme = document.getElementById("Programme").value;
            var resultSelect = document.getElementById("Result");
            var resultField = document.getElementById("ResultField");
            var cgpaField = document.getElementById("CgpaField");

            // Clear previous options
            resultSelect.innerHTML = '<option value="">Select Result</option>';

            var resultsOptions = {
                "Diploma": {
                    "SPM/O Level": [
                        "SPM - 7As",
                        "8As",
                        "8A+ / A and above",
                        "O Level - 6As",
                        "7As",
                        "8As and above"
                    ]
                },
                "Foundation": {
                    "SPM": [
                        "5As",
                        "6As",
                        "7As",
                        "8As",
                        "8A+ / A and above"
                    ],
                    "O Level": [
                        "6As",
                        "7As",
                        "8As and above"
                    ]
                },
                "Degree": {
                    "STPM / A Level": [
                        "1A",
                        "2As",
                        "3As and above"
                    ],
                    "UEC": [
                        "5As",
                        "6As",
                        "7As",
                        "8As and above"
                    ]
                }
            };

            // Update results field and CGPA field based on selected criteria
            if (programme === "Degree") {
                if (entryCriteria === "TARUMT Diploma / TARUMT Foundation / Matriculation") {
                    resultField.style.display = "none";
                    cgpaField.style.display = "block";
                } else if (resultsOptions["Degree"] && resultsOptions["Degree"][entryCriteria]) {
                    resultsOptions["Degree"][entryCriteria].forEach(function (option) {
                        var opt = document.createElement("option");
                        opt.value = option;
                        opt.text = option;
                        resultSelect.add(opt);
                    });
                    resultField.style.display = "block";
                    cgpaField.style.display = "none";
                }
            } else if (resultsOptions[programme] && resultsOptions[programme][entryCriteria]) {
                resultsOptions[programme][entryCriteria].forEach(function (option) {
                    var opt = document.createElement("option");
                    opt.value = option;
                    opt.text = option;
                    resultSelect.add(opt);
                });
                resultField.style.display = "block";
                cgpaField.style.display = "none";
            } else {
                resultField.style.display = "none";
                cgpaField.style.display = "none";
            }
        }

        // Attach event listeners
        document.getElementById("EntryCriteria").addEventListener("change", updateResults);

        document.addEventListener('DOMContentLoaded', function () {
            var form = document.getElementById('feeCalculatorForm');
            form.addEventListener('submit', function (e) {
                e.preventDefault();

                // Validation: Check if all fields are selected
                var programme = document.getElementById("Programme").value;
                var course = document.getElementById("Course").value;
                var entryCriteria = document.getElementById("EntryCriteria").value;
                var result = document.getElementById("Result").value;
                var cgpa = document.getElementById("Cgpa").value;

                if (!programme || !course || !entryCriteria || !result || (programme === "Degree" && entryCriteria === "TARUMT Diploma / TARUMT Foundation / Matriculation" && !cgpa)) {
                    document.getElementById('feeBreakdown').innerHTML = '<div class="alert alert-danger">Please ensure all fields are selected.</div>';
                    return; // Stop submission if validation fails
                }

                var formData = new FormData(form);

                fetch(form.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            var breakdownHtml = `
                                <div class="alert alert-info">
                                    <h3>Fee Breakdown for ${data.courseName}: </h3>
                                    <ul>
                                        <li>Base Course Fee: ${data.baseFee}</li>
                                        <li>Registration Fee (One Time Payment): ${data.registrationFee}</li>
                                        <li>Caution Money (One Time Payment): ${data.cautionMoney}</li>
                                        <li>Insurance Premium (Per Year): RM10.00</li>
                                        <li>Facilities & Resource Fee (Per Year): RM200.00</li>
                                        <li>Laboratory/ Workshop Fee (Per Year): RM500.00</li>
                                        <li>Award Assessment Fee (Per Year): RM100.00</li>
                                        <li>Scholarship Discount (Base Course Fee): ${data.discount}</li>
                                        <li><strong>Total Fee For Two Years Duration: ${data.totalFee}</strong></li>
                                    </ul>
                                    <h5>You are eligible for a scholarship of ${data.discountPercentage}% off</h5>
                                </div>`;
                            document.getElementById('feeBreakdown').innerHTML = breakdownHtml;

                            // Show the export button only when the fee calculation is successful
                            document.getElementById('exportFeePDF').style.display = 'block';
                        } else {
                            document.getElementById('feeBreakdown').innerHTML = '<div class="alert alert-danger">Calculation failed. Please try again.</div>';
                            // Hide the export button if the calculation fails
                            document.getElementById('exportFeePDF').style.display = 'none';
                        }
                        document.getElementById('calculatorForm').style.display = 'block';
                    });
            });
        });

        document.getElementById('exportFeePDF').addEventListener('click', function () {
            html2canvas(document.querySelector('#feeBreakdown')).then(canvas => {
                const imgData = canvas.toDataURL('image/png');
                const { jsPDF } = window.jspdf;
                const pdf = new jsPDF();
                pdf.addImage(imgData, 'PNG', 10, 10);
                pdf.save('fee-calculation.pdf');
            });
        });

                function updateComparisonDetails() {
            const checkboxes = document.querySelectorAll('input[name="courses"]:checked');

            if (checkboxes.length > 3) {
                alert('You can select a maximum of 3 courses.');
                checkboxes[checkboxes.length - 1].checked = false; // Uncheck the last checked box
            }
        }

        function compareCourses() {
            const selectedCourses = Array.from(document.querySelectorAll('input[name="courses"]:checked')).map(checkbox => checkbox.value);

            if (selectedCourses.length === 0) {
                alert('Please select at least one course to compare.');
                return;
            }

            // Make AJAX call to get program data
            fetch('/Calculator/GetProgramData', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify(selectedCourses)
            })
                .then(response => response.json())
                .then(data => {
                    displayComparisonResults(data);
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        function displayComparisonResults(data) {
            const comparisonResultDiv = document.getElementById('comparisonResult');
            comparisonResultDiv.innerHTML = ''; // Clear previous results

            if (Object.keys(data).length === 0) {
                comparisonResultDiv.innerHTML = '<p>No courses found for comparison.</p>';
                return;
            }

            // Get active filters from the toggle buttons
            const activeFilters = Array.from(document.querySelectorAll('.toggle-btn.active')).map(button => button.textContent.trim());

            // If no filters are active, show all details
            const showAllDetails = activeFilters.length === 0;

            // Generate comparison result HTML
            const resultHTML = `<div class="comparison-container">
                    ${Object.keys(data).map(courseName => {
                const course = data[courseName]; // Access course details
                const enrollUrl = `https://www.tarc.edu.my/account/login.jsp?fappcode=online-app{encodeURIComponent(courseName)}`; // Replace this with your actual enrollment URL

                return `<div class="course">
                        ${showAllDetails ? `
                            <p class="course-overview"><strong>Overview:</strong> ${course.Overview}</p>
                            <p class="course-campuses"><strong>Campuses: </strong>${course.Campuses.join(', ')}</p>
                            <p class="course-intake"><strong>Intake: </strong>${course.Intake}</p>
                            <p class="course-entry-requirements"><strong>Minimum Entry Requirements:</strong> <img src="/Images/${course.MinimumEntryRequirements}" alt="Entry Requirements" /></p>
                            <p class="course-academic-progression"><strong>Academic Progression: </strong>${course.AcademicProgression.join(', ')}</p>
                            <p class="course-career-prospects"><strong>Career Prospects: </strong>${course.CareerProspects.join(', ')}</p>
                            <p class="course-fees"><strong>Fees: </strong>${course.Fee}</p>
                        ` :
                        activeFilters.map(filter => {
                            if (filter === 'Overview') {
                                return `<p class="course-overview"><strong>Overview:</strong> ${course.Overview}</p>`;
                            } else if (filter === 'Campuses') {
                                return `<p class="course-campuses"><strong>Campuses: </strong>${course.Campuses.join(', ')}</p>`;
                            } else if (filter === 'Intake') {
                                return `<p class="course-intake"><strong>Intake: </strong>${course.Intake}</p>`;
                            } else if (filter === 'Minimum Entry Requirements') {
                                return `<p class="course-entry-requirements"><strong>Minimum Entry Requirements:</strong> <img src="/Images/${course.MinimumEntryRequirements}" alt="Entry Requirements" /></p>`;
                            } else if (filter === 'Academic Progression') {
                                return `<p class="course-academic-progression"><strong>Academic Progression: </strong>${course.AcademicProgression.join(', ')}</p>`;
                            } else if (filter === 'Career Prospects') {
                                return `<p class="course-career-prospects"><strong>Career Prospects: </strong>${course.CareerProspects.join(', ')}</p>`;
                            } else if (filter === 'Fees') {
                                return `<p class="course-fees"><strong>Fees: </strong>${course.Fee}</p>`;
                            }
                        }).join('')}

                        <!-- Enroll Now Button -->
                        <div class="enroll-btn-container">
                            <a href="${enrollUrl}" class="enroll-btn" target="_blank">Enroll Now</a>
                        </div>

                        </div>`;
            }).join('')}

                </div>`;

            comparisonResultDiv.innerHTML = resultHTML;
        }

        function toggleFilter(filter) {
            const button = document.getElementById(`toggle${filter}`);
            button.classList.toggle('active'); // Toggle active class
            compareCourses(); // Re-fetch results with the current filters
        }


        // PDF
        document.getElementById('exportPDF').addEventListener('click', function () {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();

            // Get the comparison data container
            const comparisonContainer = document.querySelector('.comparison-container');

            // Use html2canvas to capture the comparisonContainer as an image
            html2canvas(comparisonContainer).then(canvas => {
                const imgData = canvas.toDataURL('image/png');
                const imgWidth = 190; // Adjust width to fit the page
                const pageHeight = 285;
                const imgHeight = canvas.height * imgWidth / canvas.width;
                let heightLeft = imgHeight;
                let position = 0;

                // Add the image to the PDF
                doc.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
                heightLeft -= pageHeight;

                // If the image exceeds the page height, add a new page and continue
                while (heightLeft >= 0) {
                    position = heightLeft - imgHeight;
                    doc.addPage();
                    doc.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
                    heightLeft -= pageHeight;
                }

                // Save the generated PDF
                doc.save('course-comparison.pdf');
            });
        });

    </script>
}